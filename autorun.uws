//---------------------------------------------------------------------
// Time Clickers(1.4.0) 自動実行スクリプト
// ( UWSC 5.1.2 Firefox 41 にて動作確認 )
//---------------------------------------------------------------------

Option Explicit

//---------------------------------------------------------------------
// 変数・定数宣言
//---------------------------------------------------------------------
Public TIME_YY          //年 4桁
Public TIME_MM          //月 01 - 12
Public TIME_DD          //日 01 - 31
Public TIME_HH          //時 00 - 23
Public TIME_NN          //分 00 - 59
Public TIME_SS          //秒 00 - 59
Public GETTIME_sec      //GETTIME()の戻り値

Public resetTime        //リセット実施(初回起動)時刻
Public resetInterval    //リセット実行間隔
Public nextCaptureTime  //次のスクリーンショット取得時刻
Public captureCount     //スクリーンショットカウンター

//スクリプト用iniファイルの存在チェック
if FOPEN(GET_CUR_DIR + "\" + "autorun.ini", F_EXISTS) = FALSE
  MSGBOX("設定ファイルが存在しません")
  EXITEXIT
endif

//リセット実行間隔初期値
Const initResetInterval        = READINI("SETTING", "initResetInterval")

//ブロッククリック開始座標
Const clickStartPosition_x     = READINI("SETTING", "clickStartPosition_x")
Const clickStartPosition_y     = READINI("SETTING", "clickStartPosition_y")
Const increment_x              = READINI("SETTING", "increment_x")             //X座標増分
Const increment_y              = READINI("SETTING", "increment_y")             //Y座標増分

//TIME WARPボタン(ACTIME ABILITIES UNLOCKボタン)の座標
Const timeWarpPosition_x       = READINI("SETTING", "timeWarpPosition_x")
Const timeWarpPosition_y       = READINI("SETTING", "timeWarpPosition_y")

// リセット実施YESボタン座標
Const timeWarpConfirmPositon_x = READINI("SETTING", "timeWarpConfirmPositon_x")
Const timeWarpConfirmPositon_y = READINI("SETTING", "timeWarpConfirmPositon_y")

// Cooldown 実行猶予秒数
Const clickCooldownDelay       = READINI("SETTING", "clickCooldownDelay")

//---------------------------------------------------------------------
// 画面ID、ハンドルの取得
//---------------------------------------------------------------------
Dim windowId = GETID("Time Clickers")
Dim handle = GETCTLHND(windowId, "Unity.WebPlayer")

ifb windowId < 0
  MsgBox("対象のウインドウが起動していません")
  EXITEXIT
endif

ifb handle < 0
  MsgBox("Unity.WebPlayerがありません")
  EXITEXIT
endif

PRINT "一時停止：Alt+F1  停止：Alt+F2"


//---------------------------------------------------------------------
// クリック位置をクライアント座標(UnityWebPlayer内の座標)にする
//---------------------------------------------------------------------
MOUSEORG(handle, MORG_CLIENT)
//ウインドウをアクティブにする
CTRLWIN(windowId, ACTIVATE)

//---------------------------------------------------------------------
// 変数初期化
//---------------------------------------------------------------------
resetTime        = customizedGetTime()
nextCaptureTime  = resetTime
captureCount     = 0
resetInterval    = initResetInterval

//開始メッセージをログに出力
printDateAndMessage("start script")

//---------------------------------------------------------------------
// リセットしてからスクリプトを実行するか確認(デフォルト：リセットなし)
//---------------------------------------------------------------------
Dim initialResetFlag = SLCTBOX(SLCT_RDO, 5, "スクリプト実行前にリセットしますか？", "NO", "YES", "YES(SS撮影)", "NO(定期リセットなし)")
//リセットなし
ifb initialResetFlag = SLCT_1 OR initialResetFlag = 0
  customizedGetTime(initResetInterval/60/60/24)
  printMessageAndDate("auto reset →")
//リセットあり
elseif initialResetFlag = SLCT_2 OR initialResetFlag = SLCT_3
  resetAndInitialProcess()

  printDateAndMessage("reset")

  customizedGetTime(resetInterval/60/60/24)
  printMessageAndDate("auto reset →")

  resetTime = customizedGetTime()
  nextCaptureTime  = resetTime
endif

ifb initialResetFlag = SLCT_3
  THREAD capture()
endif

THREAD autoLevelUpTHREAD()

Dim coolDownCheck = 0
Dim idleModeCheck = 0
//---------------------------------------------------------------------
// スクリプト本体
//---------------------------------------------------------------------
WHILE TRUE

  // 起動(リセット)して15秒後に Idle Mode を一度だけアクティブにする
  ifb idleModeCheck = 0 AND customizedGetTime() - resetTime >= 15    
    // Idle Mode が無効になっていたらアクティブにする
    ifb !(PEEKCOLOR(695, 555, COL_RGB) = 16743424)
      KBD(VK_Q,CLICK)
      KBD(VK_W,CLICK)
      KBD(VK_E,CLICK)
    endif
    
    idleModeCheck = 1
  endif

  // Abilityをすべてアクティブにする
  KBD(VK_SPACE,CLICK)

  // Cooldownが使用可能になってから、設定した秒数後に実行する
  ifb PEEKCOLOR(955, 355, COL_RGB) = 26623
    ifb coolDownCheck = 0
      coolDownCheck = customizedGetTime()
    else
      ifb customizedGetTime() > coolDownCheck + clickCooldownDelay
        KBD(VK_0,CLICK)
        coolDownCheck = 0
      endif
    endif
  endif
  
  // Dimension Shiftをアクティブにする
  ifb PEEKCOLOR(815, 355, COL_RGB) = 26623
    KBD(VK_7,CLICK)
  endif

  //-----------------------------------------------------------------
  // ブロッククリック
  //-----------------------------------------------------------------
  clickAndMove()

  //----------------------------------------------------
  // リセット＋初期処理(放置してる場合は自動でリセット)
  //----------------------------------------------------
  //スクリプト起動(またはリセット)して一定時間後にリセット
  ifb (!(initialResetFlag = SLCT_4) AND customizedGetTime() - resetTime >= resetInterval)
    Dim resetConfirm = SLCTBOX(SLCT_RDO, 5, "リセットしますか？", "YES", "NO(10分後)", "NO(30分後)", "NO(60分後)")
    Dim resetMessage = "reset cancel"

    //タイムアウトかYESの場合リセット実施
    ifb resetConfirm = 0 OR resetConfirm = SLCT_1

      resetAndInitialProcess()

      resetMessage = "reset"

      //リセット間隔を初期化
      resetInterval = initResetInterval

      //スクリーンショット関連も初期化
      captureCount = 0
      
      coolDownCheck = 0
      idleModeCheck = 0
    elseif resetConfirm = SLCT_2
      // 10分後
      resetInterval = 600
    elseif resetConfirm = SLCT_3
      // 30分後
      resetInterval = 1800
    elseif resetConfirm = SLCT_4
      // 60分後
      resetInterval = 3600
    endif

    printDateAndMessage(resetMessage)

    //次のリセット時刻を取得
    customizedGetTime(resetInterval/60/60/24)
    printMessageAndDate("auto reset →")

    resetTime = customizedGetTime()
    nextCaptureTime = resetTime

  endif

WEND

//---------------------------------------------------------------------
// GETTIMEで取得できる値をグローバル変数に保持させる
//---------------------------------------------------------------------
FUNCTION customizedGetTime(adjustmentValue = EMPTY)

  ifb adjustmentValue = EMPTY
    RESULT = GETTIME()
  else
    RESULT = GETTIME(adjustmentValue)
  endif

  //念のためPublic変数に保持
  GETTIME_sec = RESULT

  TIME_YY = G_TIME_YY4
  TIME_MM = G_TIME_MM2
  TIME_DD = G_TIME_DD2
  TIME_HH = G_TIME_HH2
  TIME_NN = G_TIME_NN2
  TIME_SS = G_TIME_SS2

FEND

//---------------------------------------------------------------------
// 日付＋メッセージをログに出力
//---------------------------------------------------------------------
PROCEDURE printDateAndMessage(message)

  PRINT "" + TIME_YY + "/" + TIME_MM + "/" + TIME_DD + " " + TIME_HH + ":" + TIME_NN + ":" + TIME_SS + " " + message

FEND

//---------------------------------------------------------------------
// メッセージ＋日付をログに出力
//---------------------------------------------------------------------
PROCEDURE printMessageAndDate(message)

  PRINT message + " " + TIME_YY + "/" + TIME_MM + "/" + TIME_DD + " " + TIME_HH + ":" + TIME_NN + ":" + TIME_SS

FEND

//---------------------------------------------------------------------
// リセット実行と初期処理
//---------------------------------------------------------------------
PROCEDURE resetAndInitialProcess()

  dim i
  // クライアント領域内の座標指定にする
  MOUSEORG(GETCTLHND(GETID("Time Clickers"), "Unity.WebPlayer"), MORG_CLIENT)

  //「TIME WARP」をクリック
  BTN(LEFT,CLICK,timeWarpPosition_x,timeWarpPosition_y,1000)
  
  sleep(1)
  
  //「YES」をクリック
  BTN(LEFT,CLICK,timeWarpConfirmPositon_x,timeWarpConfirmPositon_y,1000)

  sleep(1)
  
  //「YES」がクリックできていなかったら再度クリック
  ifb PEEKCOLOR(timeWarpConfirmPositon_x, timeWarpConfirmPositon_y, COL_RGB) = 26879
    BTN(LEFT,CLICK,timeWarpConfirmPositon_x,timeWarpConfirmPositon_y,1000)
    sleep(1)
  endif

  // Start New Timeline をクリック
  BTN(LEFT,CLICK,880,285,1000)

  sleep(5)

  //「PISTOL LEVEL UP」をクリック
  for i = 0 to 13
    KBD(VK_H,CLICK,300)
  next
  
  //「UNLOCK ACTIVE ABILITIES」をクリック
  WHILE !(PEEKCOLOR(925, 265, COL_RGB) = 671744)
    KBD(VK_C,CLICK)
  WEND

FEND

//---------------------------------------------------------------------
// 一定間隔でスクリーンショットを撮る(TimeCube数確認用)
//---------------------------------------------------------------------
PROCEDURE capture()

  Const saveDirectory   = GET_CUR_DIR + "\screenshot\"
  Const captureInterval = 300

  //保存先のフォルダが存在しない場合は終了
  ifb FOPEN(saveDirectory, F_EXISTS) = FALSE
    MSGBOX(saveDirectory + "が存在しません")
    EXITEXIT
  endif

  WHILE TRUE
    ifb customizedGetTime() >= nextCaptureTime

      // 年月日時分秒_目安の経過時間.bmp形式で保存
      Dim file_path = saveDirectory + TIME_YY + TIME_MM + TIME_DD + TIME_HH + TIME_NN + TIME_SS + "_" + (captureInterval * captureCount)

      SAVEIMG(file_path, GETID("Time Clickers"), , , , , , 0, 0)

      printDateAndMessage("captured " + "(" + (captureInterval * captureCount) + "/" + initResetInterval + ")" )

      captureCount = captureCount + 1
      nextCaptureTime = nextCaptureTime + captureInterval

    endif
  WEND

FEND

//---------------------------------------------------------------------
// クリック処理
//---------------------------------------------------------------------
PROCEDURE clickAndMove()
  Dim i, j
  Dim coordinate_x, coordinate_y

  FOR i = 1 TO 10
    FOR j = 1 TO 10
      coordinate_x = clickStartPosition_x + increment_x * (i - 1)
      coordinate_y = clickStartPosition_y + increment_y * (j - 1)
      BTN(LEFT,CLICK,coordinate_x,coordinate_y)
    NEXT
  NEXT

FEND

//---------------------------------------------------------------------
// アップグレード自動購入
//---------------------------------------------------------------------
PROCEDURE autoLevelUp()

  KBD(VK_A,CLICK,100)    // PULSE PISTOL
  KBD(VK_S,CLICK,100)    // FLAK CANNON
  KBD(VK_D,CLICK,100)    // SOREAD RIFLE
  KBD(VK_F,CLICK,100)    // POCKET LAUNCHER
  KBD(VK_G,CLICK,100)    // PARTICLE BALL
  
FEND

//---------------------------------------------------------------------
// アップグレード自動購入(スレッド)
//---------------------------------------------------------------------
PROCEDURE autoLevelUpTHREAD()

  WHILE TRUE
    autoLevelUp()
  WEND

FEND
